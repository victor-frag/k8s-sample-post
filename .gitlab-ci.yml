stages:
  - build
  - test
  - release
  - deploy

variables:
  CONTAINER_IMAGE: victorfrag/k8s-sample-post
  CHART_PATH: ./charts/post
  CONTAINER_IMAGE_BUILT: ${CONTAINER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CI_REGISTRY: index.docker.io  # container registry URL
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375  # required since we use dind

  STAGE_NAMESPACE: staging
  PROD_NAMESPACE: prod
  STAGE_RELEASE_NAME: raddit-stage-post
  PROD_RELEASE_NAME: raddit-prod-post
  DOCKER_TLS_CERTDIR: ""


# build container image
build:
  stage: build
  image: gitlab/dind
  services:
  - docker:dind
  script:
    - echo "Building Dockerfile-based application..."
    - docker build -t ${CONTAINER_IMAGE_BUILT} .
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - echo "Pushing to the Container Registry..."
    - docker push ${CONTAINER_IMAGE_BUILT}

# run tests against built image
test:
  stage: test
  script:
    - echo "Run test cases"
    - exit 0

# tag container image that passed the tests successfully
# and push it to the registry
release:
  stage: release
  image: docker:latest
  services:
  - docker:dind
  script:
    - echo "Pulling docker image from Container Registry"
    - docker pull ${CONTAINER_IMAGE_BUILT}
    - echo "Logging to Container Registry at ${CI_REGISTRY}"
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - echo "Pushing to Container Registry..."
    - docker tag ${CONTAINER_IMAGE_BUILT} ${CONTAINER_IMAGE}:$(cat VERSION | tr -d '\r')
    - docker push ${CONTAINER_IMAGE}:$(cat VERSION | tr -d '\r')
    - docker tag ${CONTAINER_IMAGE}:$(cat VERSION | tr -d '\r') ${CONTAINER_IMAGE_LATEST}
    - docker push ${CONTAINER_IMAGE_LATEST}
    - echo ""
  only:
    - master

# deploy to staging environment
deploy_staging:
  stage: deploy
  image: victorfrag/docker-helm:v2.14.3
  before_script:
    - helm init --client-only
  script:
    - helm upgrade --install
      --set image.tag=$(cat VERSION | tr -d '\r')
      --set image.repository=${CONTAINER_IMAGE}
      --wait
      --namespace=${STAGE_NAMESPACE}
       ${STAGE_RELEASE_NAME} ${CHART_PATH}
  environment:
    name: staging
  only:
  - master

# deploy to production environment (manual)
deploy_prod:
  stage: deploy
  image: victorfrag/docker-helm:v2.14.3
  before_script:
    - helm init --client-only
  script:
    - helm upgrade --install
      --set image.tag=$(cat VERSION | tr -d '\r')
      --set image.repository=${CONTAINER_IMAGE}
      --wait
      --namespace=${PROD_NAMESPACE}
      ${PROD_RELEASE_NAME} ${CHART_PATH}
  environment:
    name: production
  when: manual
  only:
  - master
